// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId String @id @default(cuid())
  username String
  mobile String @unique
  otp String
  purchases Purchase[]
  payments Payment[]
}

model Card{
  cardId String @id @default(cuid())
  cardName String
  cardImage String
  slots Slot[]
}

model Slot{
  slotId String @id @default(cuid())
  cardId String
  card Card  @relation(fields: [cardId], references: [cardId])
  start Int
  end Int
  total Int
  isActive Boolean @default(false)
  purchases Purchase[]
}

model Purchase {
  purchaseId String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [userId])
  slotId String
  slot Slot @relation(fields: [slotId], references: [slotId])
  status Status @default(Pending)
  createdOn DateTime @default(now())
  payment Payment?
}


model Payment {
  transactionId String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [userId])
  orderId       String        @unique
  paymentId     String?
  signature     String?
  amount        Float
  status        Status        @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  purchaseId    String        @unique
  purchase      Purchase      @relation(fields: [purchaseId], references: [purchaseId], onDelete: Cascade)
}

enum Status {
  Pending
  Success
  Failed
}

